# http协议：交互、请求、响应
# 请求：
#     请求行：（请求方式、请求路径、请求协议）
#     请求头：
#         Content-Type：请求内容的格式
#         application/json json数据
#         x-www-from-urlencoded 表单
#         Cookie：cookie 信息
#         Accept：客户端接收的数据类型
#         X-Requested-with：异步请求（多） 多线程
#         User-Agent：客户端说明
#         Host：请求主机
#         connection：连接状态
#         Referer：来源
#     请求数据（正文、数据报文）
#         响应：
#         响应行：（响应码，响应信息）
#         响应头：（Set-cookie）
#         相应数据
#
#     接口测试流程：
#     1、拿到API文档（没有API文档，抓包、jmeter录制）：熟练接口业务，接口地址，鉴权，入参，出参，公共参数。。。
#     一般：cookie鉴权是web，app是通过token鉴权。
#     2、编写接口测试计划和用例评审
#     用例思路：
#         正例：  输入正常参数，接口正常返回。（介入）
#         反例：
#             鉴权反例：鉴权必填，错误，过期。。。
#             参数反例：必填，长度异常，数据异常，错误码异常
#             其他反例：黑名单，接口调用次数，分页场景（）
#         兼容性：多前端，多版本。
#     3、执行
#     4、输出报告，持续集成。
#
#     四、是如何开发接口和测试的过程和问题
#     前后端分离的开发模式：
#         1、需求评审完，通过之后，前端开发和后端开发会定接口
#         2、由其中一个开发来定义PAI接口文档（showdoc，swaagger、rap，），评审通过后，测试（介入）
#         3、（同步）后端开发根据接口文档开发接口，开发过程中使用postman调试
#         4、（同步）前端和后端同步开发，没有接口调用，需要前端MOCK数据供自己调用
#             MOCK（postman、flask、mock.js）
#         5、（同步）测试和前后端开发同步写用例
#         6、当后端开发的接口开发完成之后，测试通过jmeter执行接口测试。
#         7、当前端开发完成之后，前后端联调。
#             （1）、接口文档很旧
#             （2）、数据类型变了“1”和1 字符串和整形
#             （3）、更多、鉴权、长度、错误提示没有等。。。
#
#     接口自动化化：
#         12-31号，元旦
#     1、pytest详解以及常用插件的安装
#         基于python 单元测试框架
#         python：pytest和unittest
#         java： testng和unit
#         pytest有很多的强大插件
#             pytest （自身）
#             pytest-html （生成html报告）
#             pytest-xdist（多线程运行）
#             pytest-ordering （控制用例的执行顺序）
#             pytest-rerunfailures （失败用例重跑）
#             allure-pytest （生成allure报告的）
#             pytest-base-url （管理基础路径的）
#
#     一般在根目录下创建一个文件名为requirements.txt
#
#     主要作用：
#         1、找到测试用例
#         2、执行测试用例
#         3、判断测试结果
#         4、生成测试报告
# addopts 配置参数 = -vs 输入更加详细的信息
#                 -vs -m “smoke” 只执行冒烟用例
# testpaths 改变用例的查找规则 = ./testcases  当前目录下
# python_files = test_*.py    改变模块查找规则   有中文情况下要改为GBK
# python_classes = Test*  改变类的查找规则
# python_functions = test_*   改变函数的查找规则
# maekers = smoke：冒烟测试   标记

# -vs 输出详细的信息和调试信息
# -n=2 多线程
# --reruns = 2 失败用例重跑
# -x 失败一次就终止用例的执行
# --maxfail = 2 失败两次就终止用例的执行
# --html=./reports/report.html 生成html报告
# -m“smoke or che” 执行指定标记的用例
# 夹具的优先级
# 1/ 先执行当前目录下的conftest.py d的fixtrue
# 2/ 读取pytest.ini 配置，找到测试用例
# 3/ 执行测试用例的目录下的conftest.py的fixtrue
# 4/ 执行测试用例--》用例模块的conftest.py的fixtrue
# 5/ setup_calss
# 6/ 然后按照当前目录，测试用例目录，测试用例下的模块目录的函数级别
# 7、 setup
# 8、执行测试用例
#  环境变量
#在pytest.ini 添加一个环境
# -----  断  言------
#使用python assert
#pytest 结合allure-pytest 插件生成allure测试报告
#--alluredir=./temps --clean-alluredir 每次都清除
#企业logo定制
#找到包的位置 引用custom-logo-plugin这个包在allure.yml 文件中  增加自定义插件
#@allure.epic("万集接口自动化测试测试")
#@allure.story("获取鉴权码接口")
#@allure.feature("模块名称：登录")
#（1优先级
# 致命（BLOCKER）、严重（CRITICAL）、一般（NORMAL）、提示（MINOR）、轻微（TRIVIAL）
# @allure.severity(allure.severity_level.BLOCKER)
#
#六：脱使用allure报告脱离pycharm容器访问
#局域网：allure open ./Reports
#Yaml详解
#yaml是一种数据类型，.yaml或者.yml
#作用：配置文件：环境变量，数据库信息，用户名密码，日志格式等。
#测试用例：web、api、app
#语法规则：
#1、区分大小写
#2、通过缩进表示层级关系，一般用空格，不要用tab键
#3、通过# 注释
#4、字符串可以不用写引导，也可以写当引号或者双引号。区别单引号和双引号区别在于：单引号会对特殊字符进行转义
# 数据类型：
#1、标量
#     整数
#     浮点数
#     字符串
#
#2、对象 (字典dict)
#3、数组（列表list，通过列表加一个横杠）
#*******变量的引用：**********
#  & 表示建立一个锚点，*用来引用锚点，<<表示合并
#
#
#
#
#
#
#
#
#
#
#
#
#
#






























