{
  "uid" : "9643a31f88561763",
  "name" : "验证输入密码不能为空测试用例",
  "fullName" : "testcases.test_all_case.TestALLAPI#test_test_login",
  "historyId" : "5f86f1ee1e626d36a249cef360e41d57",
  "time" : {
    "start" : 1673154517105,
    "stop" : 1673154517160,
    "duration" : 55
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: databases断言失败: 返回结果中没有:username",
  "statusTrace" : "self = <testcases.test_all_case.TestALLAPI object at 0x0000019DAF2BEBC0>\ncaseinfo = {'extract': {'access_token': '\"access_token\":\"(.*?)\"', 'code': '$.code', 'username': '$.data.userInfo.username'}, 'fea...'json': {'password': '', 'type': 0, 'userName': 'chenjiawei132785'}, 'method': 'post', 'url': '/micro/ent/login'}, ...}\nbase_url = 'http://wanjidev.wandianzhang.com'\n\n    @pytest.mark.parametrize(\"caseinfo\", read_testcase(yaml_path))\n    # @pytest.mark.run(order=1)\n    def test_func(self, caseinfo, base_url):\n        allure.dynamic.feature(caseinfo['feature'])\n        allure.dynamic.story(caseinfo['story'])\n        allure.dynamic.title(caseinfo['title'])\n>       RequestUtil().standard_yaml_case(caseinfo, base_url)\n\ntestcases\\test_all_case.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\request_util.py:72: in standard_yaml_case\n    assert_result(caseinfo['validate'], res)\ncommons\\assert_util.py:20: in assert_result\n    db_assert(value, res.json())\ncommons\\assert_util.py:89: in db_assert\n    raise_assert_error(\"databases断言失败: 返回结果中没有:\" + str(key) + \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmsg = 'databases断言失败: 返回结果中没有:username'\n\n    def raise_assert_error(msg):\n        logger.error(msg + \"\")\n        logger.info(\"----------测试用例*异常*结束----------\\n\")\n>       raise AssertionError(msg)\nE       AssertionError: databases断言失败: 返回结果中没有:username\n\ncommons\\assert_util.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_verify_url",
    "time" : {
      "start" : 1673154516543,
      "stop" : 1673154516543,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "clear_extract_yaml",
    "time" : {
      "start" : 1673154516543,
      "stop" : 1673154516544,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1673154516543,
      "stop" : 1673154516543,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: databases断言失败: 返回结果中没有:username",
    "statusTrace" : "self = <testcases.test_all_case.TestALLAPI object at 0x0000019DAF2BEBC0>\ncaseinfo = {'extract': {'access_token': '\"access_token\":\"(.*?)\"', 'code': '$.code', 'username': '$.data.userInfo.username'}, 'fea...'json': {'password': '', 'type': 0, 'userName': 'chenjiawei132785'}, 'method': 'post', 'url': '/micro/ent/login'}, ...}\nbase_url = 'http://wanjidev.wandianzhang.com'\n\n    @pytest.mark.parametrize(\"caseinfo\", read_testcase(yaml_path))\n    # @pytest.mark.run(order=1)\n    def test_func(self, caseinfo, base_url):\n        allure.dynamic.feature(caseinfo['feature'])\n        allure.dynamic.story(caseinfo['story'])\n        allure.dynamic.title(caseinfo['title'])\n>       RequestUtil().standard_yaml_case(caseinfo, base_url)\n\ntestcases\\test_all_case.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\request_util.py:72: in standard_yaml_case\n    assert_result(caseinfo['validate'], res)\ncommons\\assert_util.py:20: in assert_result\n    db_assert(value, res.json())\ncommons\\assert_util.py:89: in db_assert\n    raise_assert_error(\"databases断言失败: 返回结果中没有:\" + str(key) + \"\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmsg = 'databases断言失败: 返回结果中没有:username'\n\n    def raise_assert_error(msg):\n        logger.error(msg + \"\")\n        logger.info(\"----------测试用例*异常*结束----------\\n\")\n>       raise AssertionError(msg)\nE       AssertionError: databases断言失败: 返回结果中没有:username\n\ncommons\\assert_util.py:30: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "114896896013c1a3",
      "name" : "log",
      "source" : "114896896013c1a3.txt",
      "type" : "text/plain",
      "size" : 1849
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "登录模块"
  }, {
    "name" : "story",
    "value" : "登录接口"
  }, {
    "name" : "epic",
    "value" : "项目名称：万集接口自动化测试"
  }, {
    "name" : "parentSuite",
    "value" : "testcases"
  }, {
    "name" : "suite",
    "value" : "test_all_case"
  }, {
    "name" : "subSuite",
    "value" : "TestALLAPI"
  }, {
    "name" : "host",
    "value" : "DESKTOP-5ALEO36"
  }, {
    "name" : "thread",
    "value" : "1784-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_all_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "9643a31f88561763.json",
  "parameterValues" : [ ]
}